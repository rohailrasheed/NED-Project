export declare function initToolbarKeyNav(opts: {
    toolbar: HTMLElement;
} & Parameters<typeof initRovingTabIndex>[0]): ReturnType<typeof initRovingTabIndex>;
export declare function initRovingTabIndex(opts: {
    orientation: 'horizontal' | 'vertical';
    buttons: HTMLElement[];
    wrapAround?: boolean;
    onFocus?: (event: FocusEvent) => void;
    onBlur?: (event: FocusEvent) => void;
    onEscape?: (event: KeyboardEvent) => void;
}): (() => void)[];
export interface MenuCloser {
    close(): void;
    finishClosing(): void;
}
export type MenuDevice = {
    type: 'keyboard';
    lastFocus: HTMLElement;
} | {
    type: 'mouse';
    lastFocus: HTMLElement | undefined;
};
export declare function initMenuKeyNav(opts: {
    orientation: 'vertical';
    device: MenuDevice;
    menu: HTMLElement;
    buttons: HTMLElement[];
    autoCloseOnBlur?: boolean;
    skipMouseFocusRestore?: boolean;
    closeCallback: () => void;
}): MenuCloser;
export declare function makeAccessibleClickListener(element: HTMLElement, onclick: (event: MouseEvent) => unknown): (event: MouseEvent) => void;
export declare function isButtonClickEvent(event: KeyboardEvent | MouseEvent): boolean;
