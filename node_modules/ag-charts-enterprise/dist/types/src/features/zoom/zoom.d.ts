import type { AgToolbarGroupAlignment, AgToolbarGroupPosition, AgToolbarGroupSize, AgToolbarZoomButton, AgZoomAnchorPoint, AgZoomButtons } from 'ag-charts-community';
import { _ModuleSupport } from 'ag-charts-community';
import { ZoomRange } from './zoomRange';
import { ZoomRatio } from './zoomRatio';
declare class ZoomButtonsProperties extends _ModuleSupport.BaseProperties<AgZoomButtons> {
    private readonly onChange;
    enabled?: boolean;
    buttons?: Array<AgToolbarZoomButton>;
    position?: AgToolbarGroupPosition;
    size?: AgToolbarGroupSize;
    align?: AgToolbarGroupAlignment;
    constructor(onChange: () => void);
}
export declare class Zoom extends _ModuleSupport.BaseModuleInstance implements _ModuleSupport.ModuleInstance {
    private readonly ctx;
    enabled: boolean;
    enableAxisDragging: boolean;
    buttons: ZoomButtonsProperties;
    enableDoubleClickToReset: boolean;
    enableIndependentAxes?: boolean;
    enablePanning: boolean;
    enableScrolling: boolean;
    enableSelecting: boolean;
    panKey: 'alt' | 'ctrl' | 'meta' | 'shift';
    axes: 'x' | 'y' | 'xy';
    scrollingStep: number;
    minVisibleItemsX: number;
    minVisibleItemsY: number;
    anchorPointX: AgZoomAnchorPoint;
    anchorPointY: AgZoomAnchorPoint;
    rangeX: ZoomRange;
    rangeY: ZoomRange;
    ratioX: ZoomRatio;
    ratioY: ZoomRatio;
    private seriesRect?;
    private paddedRect?;
    private readonly axisDragger;
    private readonly contextMenu;
    private readonly panner;
    private readonly selector;
    private readonly scroller;
    private readonly scrollPanner;
    private readonly toolbar;
    deceleration: number | 'off' | 'short' | 'long';
    private dragState;
    private hoveredAxis?;
    private axisIds;
    private axisDomains;
    private shouldFlipXY?;
    private minRatioX;
    private minRatioY;
    private restoreEvent?;
    private hasPerformedLayout;
    constructor(ctx: _ModuleSupport.ModuleContext);
    destroy(): void;
    private _destroyContextMenuActions;
    private onEnabledChange;
    private onZoomButtonsChange;
    private onRangeChange;
    private onDoubleClick;
    private onDragStart;
    private onDrag;
    private onDragEnd;
    private onNavZoom;
    private onWheel;
    private onWheelPanning;
    private onWheelScrolling;
    private onAxisLeave;
    private onAxisHover;
    private onPinchMove;
    private onLayoutComplete;
    private onUpdateComplete;
    private onZoomChange;
    private onRestoreZoom;
    private onZoomPanStart;
    private onPanUpdate;
    private updateAxes;
    private getPrimaryAxis;
    private isPanningKeyPressed;
    private isScalingX;
    private isScalingY;
    private getAnchorPointX;
    private getAnchorPointY;
    private isMinZoom;
    private updateZoom;
    private updatePrimaryAxisZooms;
    private updateUnifiedZoom;
    private updateAxisZoom;
    private restoreZoom;
    private getZoom;
    private getResetZoom;
    private getModuleProperties;
}
export {};
