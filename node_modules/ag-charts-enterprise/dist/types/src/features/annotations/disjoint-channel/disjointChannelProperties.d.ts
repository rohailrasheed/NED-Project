import { type PixelSize, _ModuleSupport, type _Scene } from 'ag-charts-community';
import { ChannelTextProperties } from '../annotationProperties';
import { type AnnotationContext, type AnnotationOptionsColorPickerType, AnnotationType } from '../annotationTypes';
declare const DisjointChannelProperties_base: (abstract new (...args: any[]) => {
    id: string;
    isValidWithContext(_context: AnnotationContext, warningPrefix: string): boolean;
    getDefaultColor(colorPickerType: AnnotationOptionsColorPickerType): string | undefined;
    locked?: boolean | undefined;
    visible?: boolean | undefined;
    set(properties: object): any;
    isValid<TContext = Omit<object, "type">>(this: TContext, warningPrefix?: string | undefined): boolean;
    toJson<J>(this: J): object;
}) & {
    new (...args: any[]): {
        background: import("../annotationProperties").BackgroundProperties;
    };
} & {
    new (...args: any[]): {
        start: import("../annotationProperties").PointProperties;
        end: import("../annotationProperties").PointProperties;
    };
} & {
    new (...args: any[]): {
        handle: import("../annotationProperties").HandleProperties;
    };
} & {
    new (...args: any[]): {
        extendStart?: boolean | undefined;
        extendEnd?: boolean | undefined;
    };
} & {
    new (...args: any[]): {
        stroke?: string | undefined;
        strokeOpacity?: number | undefined;
        strokeWidth?: number | undefined;
    };
} & {
    new (...args: any[]): {
        lineDash?: number[] | undefined;
        lineDashOffset?: number | undefined;
        lineStyle?: import("ag-charts-community").AgAnnotationLineStyleType | undefined;
    };
} & typeof _ModuleSupport.BaseProperties;
export declare class DisjointChannelProperties extends DisjointChannelProperties_base {
    static is(value: unknown): value is DisjointChannelProperties;
    type: AnnotationType.DisjointChannel;
    startHeight: number;
    endHeight: number;
    text: ChannelTextProperties;
    lineCap?: _Scene.ShapeLineCap;
    computedLineDash?: PixelSize[];
    get bottom(): {
        start: {
            x: string | number | Date | undefined;
            y: number | undefined;
        };
        end: {
            x: string | number | Date | undefined;
            y: number | undefined;
        };
    };
    isValidWithContext(context: AnnotationContext, warningPrefix?: string): boolean;
    getDefaultColor(colorPickerType: AnnotationOptionsColorPickerType): string | undefined;
    getDefaultOpacity(colorPickerType: AnnotationOptionsColorPickerType): number | undefined;
    getLineDash(): PixelSize[] | undefined;
    getLineCap(): _Scene.ShapeLineCap | undefined;
}
export {};
