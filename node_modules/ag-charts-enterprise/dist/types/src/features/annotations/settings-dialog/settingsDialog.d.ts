import { type AgAnnotationLineStyleType, _ModuleSupport } from 'ag-charts-community';
import { Dialog, type DialogOptions } from '../../../components/dialog/dialog';
import type { ColorPickerOptions } from '../../color-picker/colorPicker';
import type { ChannelTextPosition, LineTextAlignment, LineTextPosition } from '../annotationTypes';
import type { ChannelPropertiesType, LinePropertiesType } from '../annotationsSuperTypes';
interface LinearSettingsDialogOptions extends DialogOptions {
    onChangeLine: (props: LinearSettingsDialogLineChangeProps) => void;
    onChangeText: (props: LinearSettingsDialogTextChangeProps) => void;
    onChangeLineColor: Required<ColorPickerOptions>['onChange'];
    onChangeHideLineColor: Required<ColorPickerOptions>['onChangeHide'];
    onChangeLineStyleType: (lineStyleType: AgAnnotationLineStyleType) => void;
    onChangeLineStyleWidth: (strokeWidth: number) => void;
    onChangeTextColor: Required<ColorPickerOptions>['onChange'];
    onChangeHideTextColor: Required<ColorPickerOptions>['onChangeHide'];
    onChangeTextFontSize: (fontSize: number) => void;
}
export interface LinearSettingsDialogLineChangeProps {
    extendStart?: boolean;
    extendEnd?: boolean;
}
export interface LinearSettingsDialogTextChangeProps {
    alignment?: LineTextAlignment;
    position?: LineTextPosition | ChannelTextPosition;
    label?: string;
}
export declare class AnnotationSettingsDialog extends Dialog {
    constructor(ctx: _ModuleSupport.ModuleContext);
    showLineOrChannel(datum: LinePropertiesType | ChannelPropertiesType, options: LinearSettingsDialogOptions): void;
    private createLinearLineTab;
    private createLinearTextTab;
    private createColorPickerInput;
    private createStrokeWidthSelect;
    private createLineStyleRadioGroup;
    private createFontSizeSelect;
    private createPositionRadioGroup;
    private createAlignmentRadioGroup;
}
export {};
