import { _ModuleSupport, _Scene, _Util } from 'ag-charts-community';
import type { ChannelTextProperties, PointProperties } from '../annotationProperties';
import type { AnnotationContext, LineCoords } from '../annotationTypes';
import { CollidableLine } from './collidableLineScene';
import type { Handle } from './handle';
import { LinearScene } from './linearScene';
export declare abstract class ChannelScene<Datum extends {
    background: {
        fill?: string;
        fillOpacity?: number;
    };
    locked?: boolean;
    visible?: boolean;
    start: Pick<PointProperties, 'x' | 'y'>;
    end: Pick<PointProperties, 'x' | 'y'>;
    bottom: {
        start: Pick<PointProperties, 'x' | 'y'>;
        end: Pick<PointProperties, 'x' | 'y'>;
    };
    strokeWidth?: number;
    text?: ChannelTextProperties;
}> extends LinearScene<Datum> {
    protected handles: {
        [key: string]: Handle;
    };
    protected topLine: CollidableLine;
    protected bottomLine: CollidableLine;
    protected background: _Scene.Path;
    text?: _Scene.TransformableText;
    private readonly anchor;
    update(datum: Datum, context: AnnotationContext): void;
    toggleActive(active: boolean): void;
    stopDragging(): void;
    getAnchor(): _ModuleSupport.ToolbarAnchor;
    getCursor(): string | undefined;
    containsPoint(x: number, y: number): boolean;
    protected abstract updateLines(datum: Datum, top: LineCoords, bottom: LineCoords, context: AnnotationContext, naturalTop: LineCoords, naturalBottom: LineCoords): void;
    protected abstract updateHandles(datum: Datum, top: LineCoords, bottom: LineCoords): void;
    protected abstract updateText(datum: Datum, top: LineCoords, bottom: LineCoords): void;
    protected updateBackground(datum: Datum, top: LineCoords, bottom: LineCoords, context: AnnotationContext): void;
    protected updateAnchor(top: LineCoords, bottom: LineCoords): void;
    protected abstract getBackgroundPoints(datum: Datum, top: LineCoords, bottom: LineCoords, bounds: LineCoords): Array<_Util.Vec2>;
}
