import { _Scene, _Util } from 'ag-charts-community';
import type { ChannelTextProperties, LineTextProperties } from '../annotationProperties';
import type { LineCoords } from '../annotationTypes';
import type { AnnotationScene } from './annotationScene';
import type { CollidableLine } from './collidableLineScene';
interface Numbers {
    left: _Util.Vec2;
    right: _Util.Vec2;
    inset: _Util.Vec2;
    offset: _Util.Vec2;
    normal: _Util.Vec2;
    angle: number;
}
export declare class LineWithTextScene {
    static updateLineText<Datum extends {
        strokeWidth?: number;
        text?: LineTextProperties;
    }>(this: AnnotationScene & {
        line: CollidableLine;
        text?: _Scene.TransformableText;
    }, datum: Datum, coords: LineCoords): void;
    static updateChannelText<Datum extends {
        strokeWidth?: number;
        text?: ChannelTextProperties;
    }>(this: AnnotationScene & {
        text?: _Scene.TransformableText;
    }, offsetInsideTextLabel: boolean, datum: Datum, top: LineCoords, bottom: LineCoords): void;
    static getNumbers(coords: LineCoords, fontSize?: number, strokeWidth?: number): Numbers;
    static positionAndAlignment({ left, right, normal, angle, inset, offset }: Numbers, position?: 'top' | 'center' | 'bottom', alignment?: 'left' | 'center' | 'right', offsetInsideTextLabel?: boolean): {
        point: _Util.Vec2;
        textBaseline: "bottom" | "middle" | "top";
    };
    static setProperties(scene: _Scene.TransformableText, datum: LineTextProperties | ChannelTextProperties, point: _Util.Vec2, angle: number, textBaseline: CanvasTextBaseline): void;
}
export {};
